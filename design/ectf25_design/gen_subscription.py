"""
Author: Ben Janis
Date: 2025

This source file is part of an example system for MITRE's 2025 Embedded System CTF
(eCTF). This code is being provided only for educational purposes for the 2025 MITRE
eCTF competition, and may not meet MITRE standards for quality. Use this code at your
own risk!

Copyright: Copyright (c) 2025 The MITRE Corporation
"""

import argparse
import json
from pathlib import Path
import struct
from ectf25_design import Secrets, ChannelKeyDerivation, get_decoder_key
from Crypto.Cipher import ChaCha20
from Crypto.Random import get_random_bytes
from Crypto.Signature import eddsa
from Crypto.PublicKey import ECC

from loguru import logger

NODE_PASSWORD_SIZE = 25

def gen_subscription(
    secrets: bytes, device_id: int, start: int, end: int, channel: int
) -> bytes:
    """Generate the contents of a subscription.

    The output of this will be passed to the Decoder using ectf25.tv.subscribe

    The structure of the subscription is as follows:
    Header (36 bytes)
        - Decoder ID (4 bytes)
        - Start timestamp (8 bytes)
        - End timestamp (8 bytes)
        - Channel ID (4 bytes)
        - Encryption nonce (12 bytes)
    Body (25 x 128 = 3200 bytes) of password bytes where a password is
        - Trunc: Node number // 2 + 1 (1 byte)
        - Ext: Node number % 2 (8 bytes)
        - Key: Key for node (16 bytes)
    Signature (64 bytes)

    :param secrets: Contents of the secrets file generated by ectf25_design.gen_secrets
    :param device_id: Device ID of the Decoder
    :param start: First timestamp the subscription is valid for
    :param end: Last timestamp the subscription is valid for
    :param channel: Channel to enable
    """
    # Load the json of the secrets file
    secrets: Secrets = json.loads(secrets)
    # Process secrets
    for k, val in secrets["channels"].items():
        secrets["channels"][k] = bytes.fromhex(val)
    secrets["decoder_dk"] = bytes.fromhex(secrets["decoder_dk"])

    assert(str(channel) in secrets["channels"].keys())
    channel_root = secrets["channels"][str(channel)]

    header_bytes = struct.pack("<IQQI", device_id, start, end, channel)

    deriv = ChannelKeyDerivation(root=channel_root, height=64)
    keys = deriv.get_channel_keys(start, end)

    passwords_bytes = b""
    for ch_key in keys:
        trunc = ch_key.node_num // 2
        # Set ext to be 1 or 2 for last branch, so 0 can be used as uninitialized state 
        ext = (ch_key.node_num % 2) + 1
        key = ch_key.key

        node_pass = struct.pack("<Qb16s", trunc, ext, key)
        passwords_bytes += node_pass
    
    # Pad password bytes to size of 128 node passwords
    passwords_bytes += b"\x00" * (128*NODE_PASSWORD_SIZE - len(passwords_bytes))

    decoder_key = get_decoder_key(secrets["decoder_dk"], device_id)
    nonce = get_random_bytes(12)
    cipher = ChaCha20.new(key=decoder_key, nonce=nonce)
    passwords_enc_bytes = cipher.encrypt(passwords_bytes)

    header_bytes += nonce

    # Load the host key and create signer
    host_key = ECC.import_key(bytes.fromhex(secrets["host_key"]))
    signer = eddsa.new(host_key, 'rfc8032')

    sign_contents = header_bytes + passwords_enc_bytes
    signature = signer.sign(sign_contents)

    package = header_bytes + passwords_enc_bytes + signature

    return package


def parse_args():
    """Define and parse the command line arguments

    NOTE: Your design must not change this function
    """
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--force",
        "-f",
        action="store_true",
        help="Force creation of subscription file, overwriting existing file",
    )
    parser.add_argument(
        "secrets_file",
        type=argparse.FileType("rb"),
        help="Path to the secrets file created by ectf25_design.gen_secrets",
    )
    parser.add_argument("subscription_file", type=Path, help="Subscription output")
    parser.add_argument(
        "device_id", type=lambda x: int(x, 0), help="Device ID of the update recipient."
    )
    parser.add_argument(
        "start", type=lambda x: int(x, 0), help="Subscription start timestamp"
    )
    parser.add_argument("end", type=int, help="Subscription end timestamp")
    parser.add_argument("channel", type=int, help="Channel to subscribe to")
    return parser.parse_args()


def main():
    """Main function of gen_subscription

    You will likely not have to change this function
    """
    # Parse the command line arguments
    args = parse_args()

    subscription = gen_subscription(
        args.secrets_file.read(), args.device_id, args.start, args.end, args.channel
    )

    # Print the generated subscription for your own debugging
    # Attackers will NOT have access to the output of this (although they may have
    # subscriptions in certain scenarios), but feel free to remove
    #
    # NOTE: Printing sensitive data is generally not good security practice
    logger.debug(f"Generated subscription: {subscription}")

    # Open the file, erroring if the file exists unless the --force arg is provided
    with open(args.subscription_file, "wb" if args.force else "xb") as f:
        f.write(subscription)

    # For your own debugging. Feel free to remove
    logger.success(f"Wrote subscription to {str(args.subscription_file.absolute())}")


if __name__ == "__main__":
    main()
